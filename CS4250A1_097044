#-------------------------------------------------------------------------
# AUTHOR: Joshua Totten
# FILENAME: CS4250A1_097044
# SPECIFICATION: Build a document-term matrix using tf-idf term weights
# FOR: CS 4250- Assignment #1
# TIME SPENT: how long it took you to complete the assignment: 3h
#-----------------------------------------------------------*/

#IMPORTANT NOTE: DO NOT USE ANY ADVANCED PYTHON LIBRARY TO COMPLETE THIS CODE SUCH AS numpy OR pandas. You have to work here only with standard arrays

#Importing some Python libraries
import csv
import math

documents = []

#Reading the data in a csv file
with open('collection.csv', 'r') as csvfile:
  reader = csv.reader(csvfile)
  for i, row in enumerate(reader):
         if i > 0:  # skipping the header
            documents.append (row[0])


stopWords = {"I", "She", "her", "him", "They", "their", "and"}

stemming = {"loves": "love",
            "cats": "cat",
            "dogs": "dog"
            }

for i in range(len(documents)):
    words = documents[i].split()
    search_words = [] 
    #Conducting stopword removal for pronouns/conjunctions. Hint: use a set to define your stopwords.
    for j in range(len(words)):
        if words[j] not in stopWords:
            search_words.append(words[j])
    #Conducting stemming. Hint: use a dictionary to map word variations to their stem.
    for j in range(len(search_words)):
        if search_words[j] in stemming:
            search_words[j] = stemming[search_words[j]]
    documents[i] = " ".join(search_words)

#Identifying the index terms.
terms = ["love", "cat", "dog"]

#Building the document-term matrix by using the tf-idf weights.
docTermMatrix = [[0 for _ in range(len(terms))] for _ in range(len(documents))] 

for i, doc in enumerate(documents):
    words = doc.split()
    for j, term in enumerate(terms):
        tf = words.count(term) / len(words)
        idf = math.log10(len(documents) / (sum(1 for d in documents if term in d))) 
        docTermMatrix[i][j] = round((tf * idf), 3)

#Printing the document-term matrix.
for row in docTermMatrix:
    print(row)
